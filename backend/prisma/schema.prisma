datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @default(uuid())
  fullName         String
  email            String        @unique
  password         String
  role             Role
  origin           String?
  latitude         Float?
  longitude        Float?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  products         Product[]     @relation("FarmerProducts")
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
  orders           Order[]       @relation("BuyerOrders")
  reports          Report[]
}

enum Role {
  BUYER
  FARMER
  ADMIN
}

model Product {
  id          String      @id @default(uuid())
  farmer      User        @relation("FarmerProducts", fields: [farmerId], references: [id])
  farmerId    String
  name        String
  price       Int
  description String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  buyer     User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId   String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id           String  @id @default(uuid())
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      String
  product      Product @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  priceAtOrder Int
}

model ChatMessage {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  message    String
  timestamp  DateTime @default(now())
}

model Report {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  status    ReportStatus @default(OPEN)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}
